# -*- coding: utf-8 -*-

# Copyright (c) 2014, KOL
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


def GetVideoData(url):
    try:
        html = HTML.ElementFromURL(url)
    except Ex.HTTPError, e:
        if e.code == 404:
            raise Ex.MediaNotAvailable

    try:
        ret = {}
        for key in ('trackinfo', 'options'):
            ret[key] = JSON.ObjectFromString(
                html.xpath('//div[@id="'+key+'"]')[0].get('data-value')
            )

        return ret
    except:
        pass
    return False


def GetVideoUrls(url):
    item = GetVideoData(url)
    if not item:
        raise Ex.MediaNotAvailable

    try:
        res = HTTP.Request(
            item['options']['video_balancer']['m3u8']
        ).content.splitlines()
    except:
        raise Ex.MediaNotAvailable

    ret = {}
    for url in res:
        if url and url[:1] != '#':
            key = Regex('.+(i=\d+x(\d+)_\d+)').search(url)
            resolution = int(key.group(2))
            key = key.group(1)

            ret[key] = {
                'resolution': 240,
                'url': url,
            }

            if resolution >= 700:
                ret[key]['resolution'] = 720
            elif resolution >= 400:
                ret[key]['resolution'] = 480
            elif resolution >= 280:
                ret[key]['resolution'] = 360

    if not len(ret):
        raise Ex.MediaNotAvailable

    return ret


############################################################################
def MetadataObjectForURL(url):

    item = GetVideoData(url)
    if not item:
        raise Ex.MediaNotAvailable

    return VideoClipObject(
        title=u'%s' % item['trackinfo']['title'],
        thumb=u'%s' % item['options']['thumbnail_url'],
        duration=int(item['trackinfo']['duration'])*1000
    )


############################################################################
def MediaObjectsForURL(url):

    info = GetVideoUrls(url)

    return [
        MediaObject(
            parts=[
                PartObject(key=Callback(
                    PlayVideo, url=item['url']
                ))
            ],
            video_resolution=item['resolution'],
            audio_channels=2,
            container='mpegts',
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            optimized_for_streaming=True
        ) for item in sorted(
            info.values(),
            key=lambda k: k['resolution'],
            reverse=True
        )
    ]


############################################################################
@indirect
def PlayVideo(url):

    Log.Debug('Play %s' % url)

    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url))
